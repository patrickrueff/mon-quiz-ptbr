# 04_assets_quiz_js.py
# Version compl√®te "initiale" avec correctif minimal :
# - Pas d'interpolation d'accolades dans la cha√Æne (on √©vite f-strings sur les blocs JS)
# - Seules les lignes des constantes sont inject√©es par concat√©nation
# - AUCUN ajout de logique : m√™me API startQuiz(POOL), m√™me structure

def make_quiz_js(timer_seconds: int = 8, auto_delay_ms: int = 900) -> str:
    return (
        "function shuffle(a){ for(let i=a.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[a[i],a[j]]=[a[j],a[i]];} return a; }\n"
        "function makeQuiz(POOL, limit){ const items=[...POOL]; shuffle(items); if(limit&&limit>0){ items.length=Math.min(limit,items.length);} return items; }\n"
        "function buildChoices(pool, answer, n=4){\n"
        "  const others = pool.filter(x => x.pt !== answer.pt);\n"
        "  shuffle(others);\n"
        "  const picks = others.slice(0, Math.max(0, n-1));\n"
        "  return shuffle([...picks, answer]);\n"
        "}\n"
        "function QuizApp(config){\n"
        "  const AUTO_DELAY_MS = " + str(auto_delay_ms) + ";\n"
        "  const TIMER_LIMIT_S = " + str(timer_seconds) + ";\n"
        "  const state = { pool:config.pool, idx:0, score:0, total:config.total, optionsCount:4,\n"
        "                  started:false, paused:false, timerNext:null, countdown:TIMER_LIMIT_S,\n"
        "                  countdownInterval:null, answered:false };\n"
        "  const elBtnStart   = document.getElementById('btn-start');\n"
        "  const elBtnPause   = document.getElementById('btn-pause');\n"
        "  const elBtnResume  = document.getElementById('btn-resume');\n"
        "  const elBtnRestart = document.getElementById('btn-restart');\n"
        "  const elQuestion = document.getElementById('qnum');\n"
        "  const elScore    = document.getElementById('score');\n"
        "  const elTimer    = document.getElementById('timer');\n"
        "  const elChoices  = document.getElementById('choices');\n"
        "  const elResult   = document.getElementById('result');\n"
        "  const elConfig   = document.getElementById('config');\n"
        "  const elStage    = document.getElementById('stage');\n"
        "\n"
        "  function setButtons(){\n"
        "    elBtnStart.style.display   = state.started ? 'none' : 'inline-flex';\n"
        "    elBtnPause.style.display   = (state.started && !state.paused) ? 'inline-flex' : 'none';\n"
        "    elBtnResume.style.display  = (state.started && state.paused) ? 'inline-flex' : 'none';\n"
        "    elBtnRestart.style.display = state.started ? 'inline-flex' : 'none';\n"
        "  }\n"
        "  function clearTimers(){\n"
        "    if (state.timerNext){ clearTimeout(state.timerNext); state.timerNext = null; }\n"
        "    if (state.countdownInterval){ clearInterval(state.countdownInterval); state.countdownInterval = null; }\n"
        "  }\n"
        "  function scheduleNext(){ if(state.paused) return; if(state.timerNext){clearTimeout(state.timerNext);} state.timerNext=setTimeout(nextQuestion,AUTO_DELAY_MS); }\n"
        "  function startCountdown(){\n"
        "    if (state.countdownInterval){ clearInterval(state.countdownInterval); }\n"
        "    state.countdown = TIMER_LIMIT_S;\n"
        "    elTimer.textContent = state.countdown.toString();\n"
        "    state.countdownInterval = setInterval(() => {\n"
        "      if (state.paused) return;\n"
        "      state.countdown -= 1;\n"
        "      elTimer.textContent = Math.max(0, state.countdown).toString();\n"
        "      if (state.countdown <= 0){\n"
        "        clearInterval(state.countdownInterval);\n"
        "        onTimeout();\n"
        "      }\n"
        "    }, 1000);\n"
        "  }\n"
        "  function stopCountdown(){ if(state.countdownInterval){ clearInterval(state.countdownInterval); state.countdownInterval=null; }}\n"
        "  function render(){\n"
        "    const cur = state.pool[state.idx];\n"
        "    state.answered = false;\n"
        "    elQuestion.textContent = (state.idx + 1) + \" / \" + state.total;\n"
        "    elScore.textContent = state.score;\n"
        "    elResult.textContent = \"\";\n"
        "    elChoices.innerHTML = \"\";\n"
        "    const opts = buildChoices(state.pool, cur, state.optionsCount);\n"
        "    opts.forEach(opt => {\n"
        "      const btn = document.createElement('button');\n"
        "      btn.className = 'choice';\n"
        "      btn.textContent = opt.pt;\n"
        "      btn.onclick = () => onAnswer(opt.pt === cur.pt, btn);\n"
        "      elChoices.appendChild(btn);\n"
        "    });\n"
        "    if (!state.paused) {\n"
        "      stopAudio();\n"
        "      play(cur.normal);\n"
        "      startCountdown();\n"
        "    }\n"
        "  }\n"
        "  function lockChoices(){ elChoices.querySelectorAll('.choice').forEach(b => b.disabled = true); }\n"
        "  function markCorrect(){\n"
        "    elChoices.querySelectorAll('.choice').forEach(b => {\n"
        "      if (b.textContent === state.pool[state.idx].pt) b.classList.add('correct');\n"
        "    });\n"
        "  }\n"
        "  function onAnswer(isCorrect, btn){\n"
        "    if (state.answered) return;\n"
        "    state.answered = true;\n"
        "    stopCountdown();\n"
        "    lockChoices();\n"
        "    if (isCorrect){ btn.classList.add('correct'); state.score += 1; elResult.textContent = \"‚úÖ Correct !\"; }\n"
        "    else { btn.classList.add('wrong'); markCorrect(); elResult.textContent = \"‚ùå Mauvaise r√©ponse.\"; }\n"
        "    elScore.textContent = state.score;\n"
        "    scheduleNext();\n"
        "  }\n"
        "  function onTimeout(){\n"
        "    if (state.answered) return;\n"
        "    state.answered = true;\n"
        "    lockChoices(); markCorrect();\n"
        "    elResult.textContent = \"‚è∞ Temps √©coul√©.\";\n"
        "    scheduleNext();\n"
        "  }\n"
        "  function nextQuestion(){\n"
        "    clearTimers();\n"
        "    if (state.idx + 1 >= state.total){\n"
        "      elChoices.innerHTML = \"\";\n"
        "      elResult.textContent = \"üéâ Termin√© ! Score : \" + state.score + \" / \" + state.total;\n"
        "      setButtons();\n"
        "      return;\n"
        "    }\n"
        "    state.idx += 1; render();\n"
        "  }\n"
        "  // Controls\n"
        "  elBtnStart.onclick = () => {\n"
        "    const sel = document.getElementById('qcount');\n"
        "    const total = parseInt(sel.value, 10) || 10;\n"
        "    state.pool = makeQuiz(state.pool, total);\n"
        "    state.total = state.pool.length;\n"
        "    state.idx = 0; state.score = 0; state.started = true; state.paused = false;\n"
        "    clearTimers(); stopAudio(); elConfig.style.display = 'none'; elStage.style.display = 'block';\n"
        "    render(); setButtons();\n"
        "  };\n"
        "  elBtnPause.onclick = () => { state.paused = true; clearTimers(); stopAudio(); setButtons(); };\n"
        "  elBtnResume.onclick = () => { state.paused = false; setButtons(); render(); };\n"
        "  elBtnRestart.onclick = () => { clearTimers(); state.started=false; state.paused=false; state.idx=0; state.score=0; stopAudio(); elStage.style.display='none'; elConfig.style.display='block'; setButtons(); };\n"
        "  setButtons();\n"
        "}\n"
        "function startQuiz(POOL){ QuizApp({ pool: POOL, total: POOL.length }); }\n"
    )

if __name__ == \"__main__\":
    js_code = make_quiz_js()
    with open(\"quiz.js\", \"w\", encoding=\"utf-8\") as f:
        f.write(js_code)
    print(\"‚úÖ Fichier quiz.js g√©n√©r√© (version initiale, correctif minimal)\")
