# 04_assets_quiz_js.py
# - Le POOL est fourni par la page (cl√© "phon" incluse, comme pour les le√ßons)
# - Feedback d√©taill√© apr√®s chaque question (PT / phon / FR)
# - R√©capitulatif final avec statut ‚úÖ/‚ùå
# - +3 secondes d‚Äôaffichage de la r√©ponse avant la suivante
# - Pas de f-string autour des blocs JS pour √©viter les soucis d‚Äôaccolades

def make_quiz_js(timer_seconds: int = 8, auto_delay_ms: int = 900) -> str:
    return (
        "function shuffle(a){ for(let i=a.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[a[i],a[j]]=[a[j],a[i]];} return a; }\n"
        "function makeQuiz(POOL, limit){ const items=[...POOL]; shuffle(items); if(limit&&limit>0){ items.length=Math.min(limit,items.length);} return items; }\n"
        "function buildChoices(pool, answer, n=4){\n"
        "  const others = pool.filter(x => x.pt !== answer.pt);\n"
        "  shuffle(others);\n"
        "  const picks = others.slice(0, Math.max(0, n-1));\n"
        "  return shuffle([...picks, answer]);\n"
        "}\n"
        "// --- Acc√®s direct comme les le√ßons : la phon√©tique est dans item.phon ---\n"
        "function getPhon(x){ return (x && typeof x.phon === 'string') ? x.phon : ''; }\n"
        "function getFr(x){ return (x && typeof x.fr   === 'string') ? x.fr   : (x && x.fr) || ''; }\n"
        "\n"
        "function QuizApp(config){\n"
        "  const AUTO_DELAY_MS = " + str(auto_delay_ms) + ";\n"
        "  const EXTRA_FEEDBACK_MS = 3000; // +3s d'affichage de la r√©ponse\n"
        "  const TIMER_LIMIT_S = " + str(timer_seconds) + ";\n"
        "  const state = { pool:config.pool, idx:0, score:0, total:config.total, optionsCount:4,\n"
        "                  started:false, paused:false, timerNext:null, countdown:TIMER_LIMIT_S,\n"
        "                  countdownInterval:null, answered:false, history:[] };\n"
        "  const elBtnStart   = document.getElementById('btn-start');\n"
        "  const elBtnPause   = document.getElementById('btn-pause');\n"
        "  const elBtnResume  = document.getElementById('btn-resume');\n"
        "  const elBtnRestart = document.getElementById('btn-restart');\n"
        "  const elQuestion = document.getElementById('qnum');\n"
        "  const elScore    = document.getElementById('score');\n"
        "  const elTimer    = document.getElementById('timer');\n"
        "  const elChoices  = document.getElementById('choices');\n"
        "  const elResult   = document.getElementById('result');\n"
        "  const elConfig   = document.getElementById('config');\n"
        "  const elStage    = document.getElementById('stage');\n"
        "\n"
        "  function setButtons(){\n"
        "    elBtnStart.style.display   = state.started ? 'none' : 'inline-flex';\n"
        "    elBtnPause.style.display   = (state.started && !state.paused) ? 'inline-flex' : 'none';\n"
        "    elBtnResume.style.display  = (state.started && state.paused) ? 'inline-flex' : 'none';\n"
        "    elBtnRestart.style.display = state.started ? 'inline-flex' : 'none';\n"
        "  }\n"
        "  function clearTimers(){\n"
        "    if (state.timerNext){ clearTimeout(state.timerNext); state.timerNext = null; }\n"
        "    if (state.countdownInterval){ clearInterval(state.countdownInterval); state.countdownInterval = null; }\n"
        "  }\n"
        "  function scheduleNext(){\n"
        "    if(state.paused) return;\n"
        "    if(state.timerNext){clearTimeout(state.timerNext);} \n"
        "    state.timerNext = setTimeout(nextQuestion, AUTO_DELAY_MS + EXTRA_FEEDBACK_MS);\n"
        "  }\n"
        "  function startCountdown(){\n"
        "    if (state.countdownInterval){ clearInterval(state.countdownInterval); }\n"
        "    state.countdown = TIMER_LIMIT_S;\n"
        "    elTimer.textContent = state.countdown.toString();\n"
        "    state.countdownInterval = setInterval(() => {\n"
        "      if (state.paused) return;\n"
        "      state.countdown -= 1;\n"
        "      elTimer.textContent = Math.max(0, state.countdown).toString();\n"
        "      if (state.countdown <= 0){\n"
        "        clearInterval(state.countdownInterval);\n"
        "        onTimeout();\n"
        "      }\n"
        "    }, 1000);\n"
        "  }\n"
        "  function stopCountdown(){ if(state.countdownInterval){ clearInterval(state.countdownInterval); state.countdownInterval=null; }}\n"
        "  function render(){\n"
        "    const cur = state.pool[state.idx];\n"
        "    state.answered = false;\n"
        "    elQuestion.textContent = (state.idx + 1) + \" / \" + state.total;\n"
        "    elScore.textContent = state.score;\n"
        "    elResult.textContent = \"\";\n"
        "    elChoices.innerHTML = \"\";\n"
        "    const opts = buildChoices(state.pool, cur, state.optionsCount);\n"
        "    opts.forEach(opt => {\n"
        "      const btn = document.createElement('button');\n"
        "      btn.className = 'choice';\n"
        "      btn.textContent = opt.pt;\n"
        "      btn.onclick = () => onAnswer(opt.pt === cur.pt, btn);\n"
        "      elChoices.appendChild(btn);\n"
        "    });\n"
        "    if (!state.paused) {\n"
        "      stopAudio();\n"
        "      play(cur.normal);\n"
        "      startCountdown();\n"
        "    }\n"
        "  }\n"
        "  function lockChoices(){ elChoices.querySelectorAll('.choice').forEach(b => b.disabled = true); }\n"
        "  function markCorrect(){\n"
        "    elChoices.querySelectorAll('.choice').forEach(b => {\n"
        "      if (b.textContent === state.pool[state.idx].pt) b.classList.add('correct');\n"
        "    });\n"
        "  }\n"
        "  function showFeedback(item, isCorrect){\n"
        "    const phon = getPhon(item);\n"
        "    const fr   = getFr(item);\n"
        "    const icon = isCorrect ? '‚úÖ' : '‚ùå';\n"
        "    const title = isCorrect ? 'Correct !' : 'Mauvaise r√©ponse.';\n"
        "    elResult.innerHTML = \"<div class=\\\"feedback\\\">\"+\n"
        "      `<div class=\"fb-title\">${icon} ${title}</div>`+\n"
        "      `<div class=\"fb-pt\"><strong>Portugais :</strong> ${item.pt || ''}</div>`+\n"
        "      `<div class=\"fb-phon\"><strong>Phon√©tique :</strong> ${phon || '‚Äî'}</div>`+\n"
        "      `<div class=\"fb-fr\"><strong>Fran√ßais :</strong> ${fr || '‚Äî'}</div>`+\n"
        "    \"</div>\";\n"
        "  }\n"
        "  function onAnswer(isCorrect, btn){\n"
        "    if (state.answered) return;\n"
        "    state.answered = true;\n"
        "    stopCountdown();\n"
        "    lockChoices();\n"
        "    if (isCorrect){ btn.classList.add('correct'); state.score += 1; }\n"
        "    else { btn.classList.add('wrong'); markCorrect(); }\n"
        "    elScore.textContent = state.score;\n"
        "    const item = state.pool[state.idx];\n"
        "    showFeedback(item, isCorrect);\n"
        "    state.history.push({ pt: item.pt || '', phon: getPhon(item), fr: getFr(item), correct: !!isCorrect });\n"
        "    scheduleNext();\n"
        "  }\n"
        "  function onTimeout(){\n"
        "    if (state.answered) return;\n"
        "    state.answered = true;\n"
        "    lockChoices(); markCorrect();\n"
        "    const item = state.pool[state.idx];\n"
        "    showFeedback(item, false);\n"
        "    state.history.push({ pt: item.pt || '', phon: getPhon(item), fr: getFr(item), correct: false });\n"
        "    scheduleNext();\n"
        "  }\n"
        "  function buildSummary(entries){\n"
        "    const rows = entries.map((e,i)=>{\n"
        "      const status = e.correct ? '‚úÖ' : '‚ùå';\n"
        "      return `<tr class=\"row-${e.correct?'ok':'ko'}\">`\n"
        "           + `<td>${i+1}</td>`\n"
        "           + `<td>${status}</td>`\n"
        "           + `<td>${e.pt || ''}</td>`\n"
        "           + `<td>${e.phon || '‚Äî'}</td>`\n"
        "           + `<td>${e.fr || '‚Äî'}</td>`\n"
        "           + `</tr>`;\n"
        "    }).join('');\n"
        "    const score = `${state.score} / ${state.total}`;\n"
        "    return (\n"
        "      `<div class=\"summary\">`\n"
        "      + `<div class=\"summary-title\">üéâ Termin√© ! Score : ${score}</div>`\n"
        "      + `<table class=\"summary-table\">`\n"
        "      + `<thead><tr><th>#</th><th>OK</th><th>Portugais</th><th>Phon√©tique</th><th>Fran√ßais</th></tr></thead>`\n"
        "      + `<tbody>${rows}</tbody>`\n"
        "      + `</table>`\n"
        "      + `</div>`\n"
        "    );\n"
        "  }\n"
        "  function nextQuestion(){\n"
        "    clearTimers();\n"
        "    if (state.idx + 1 >= state.total){\n"
        "      elChoices.innerHTML = \"\";\n"
        "      elResult.innerHTML = buildSummary(state.history);\n"
        "      setButtons();\n"
        "      return;\n"
        "    }\n"
        "    state.idx += 1; render();\n"
        "  }\n"
        "  // Controls\n"
        "  elBtnStart.onclick = () => {\n"
        "    const sel = document.getElementById('qcount');\n"
        "    const total = parseInt(sel.value, 10) || 10;\n"
        "    state.history = [];\n"
        "    state.pool = makeQuiz(state.pool, total);\n"
        "    state.total = state.pool.length;\n"
        "    state.idx = 0; state.score = 0; state.started = true; state.paused = false;\n"
        "    clearTimers(); stopAudio(); elConfig.style.display = 'none'; elStage.style.display = 'block';\n"
        "    render(); setButtons();\n"
        "  };\n"
        "  elBtnPause.onclick = () => { state.paused = true; clearTimers(); stopAudio(); setButtons(); };\n"
        "  elBtnResume.onclick = () => { state.paused = false; setButtons(); render(); };\n"
        "  elBtnRestart.onclick = () => { clearTimers(); state.started=false; state.paused=false; state.idx=0; state.score=0; stopAudio(); elStage.style.display='none'; elConfig.style.display='block'; setButtons(); };\n"
        "  setButtons();\n"
        "}\n"
        "function startQuiz(POOL){ QuizApp({ pool: POOL, total: POOL.length }); }\n"
        "\n"
        "/* CSS sugg√©r√© (optionnel)\n"
        "  .feedback { margin-top: .5rem; line-height:1.4; }\n"
        "  .fb-title { font-weight:600; margin-bottom:.25rem; }\n"
        "  .summary { margin-top: .75rem; }\n"
        "  .summary-title { font-weight:700; margin-bottom:.5rem; }\n"
        "  .summary-table { width:100%; border-collapse: collapse; }\n"
        "  .summary-table th, .summary-table td { border:1px solid #ddd; padding:.35rem .5rem; text-align:left; }\n"
        "  .row-ok td { background: #f2fbf4; }\n"
        "  .row-ko td { background: #fff5f5; }\n"
        "*/\n"
    )

if __name__ == "__main__":
    js_code = make_quiz_js()
    with open("quiz.js", "w", encoding="utf-8") as f:
        f.write(js_code)
    print("‚úÖ Fichier quiz.js g√©n√©r√© (phon√©tique via item.phon, +3s)")
